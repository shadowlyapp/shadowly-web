'use client';

import { useEffect, useRef, useState } from "react";
import { useSearchParams, useRouter } from "next/navigation";
import YouTubePlayer from "@/components/YouTubePlayer";
import Transcript from "@/components/Transcript";
import RecommendedVideos from "@/components/RecommendedVideos";

interface TranscriptLine {
  text: string;
  start: number;
  duration: number;
}

function extractYouTubeVideoId(urlString: string): string | null {
  try {
    const url = new URL(urlString);
    if (url.hostname.includes("youtu.be")) return url.pathname.split("/")[1];
    if (url.searchParams.has("v")) return url.searchParams.get("v");
    const pathParts = url.pathname.split("/");
    if (["embed", "shorts"].includes(pathParts[1]) && pathParts[2]) return pathParts[2];
    return null;
  } catch {
    return null;
  }
}

export default function PlayerPage() {
  const router = useRouter();
  const searchParams = useSearchParams();

  const [searchUrl, setSearchUrl] = useState("");
  const [videoId, setVideoId] = useState("");
  const [transcript, setTranscript] = useState<TranscriptLine[]>([]);
  const [currentTime, setCurrentTime] = useState(0);
  const [player, setPlayer] = useState<YT.Player | null>(null);
  const [playerReady, setPlayerReady] = useState(false);

  const [captions, setCaptions] = useState<{ name: string; languageCode: string; isAutoGenerated?: boolean }[]>([]);
  const [selectedCaptionLang, setSelectedCaptionLang] = useState<string>("");
  const [isAutoGenerated, setIsAutoGenerated] = useState(false);

  const [targetLang, setTargetLang] = useState("es");
  const [languages, setLanguages] = useState<{ code: string; name: string }[]>([]);

  const [allowTimeUpdates, setAllowTimeUpdates] = useState(true);
  const [allowScroll, setAllowScroll] = useState(true);
  const resumeTimeoutRef = useRef<NodeJS.Timeout | null>(null);

  const [loadingTranscript, setLoadingTranscript] = useState(false);
  const [errorTranscript, setErrorTranscript] = useState("");
  const retryRef = useRef(0);

  const playerSectionRef = useRef<HTMLDivElement>(null);

  const handleSearch = (e: React.FormEvent) => {
    e.preventDefault();
    const id = extractYouTubeVideoId(searchUrl);
    if (id) {
      router.push(`/player?id=${id}`);
      setTimeout(() => {
        playerSectionRef.current?.scrollIntoView({ behavior: "smooth" });
      }, 100);
    } else {
      setSearchUrl("");
    }
  };

  useEffect(() => {
    const videoParam = decodeURIComponent(searchParams.get("id") || "");
    const id = extractYouTubeVideoId(videoParam) || videoParam;
    setVideoId(id);
  }, [searchParams]);

  useEffect(() => {
    if (!videoId || selectedCaptionLang === undefined) return;

    const fetchTranscript = async () => {
      setLoadingTranscript(true);
      setErrorTranscript("");

      const params = new URLSearchParams({ id: videoId });
      if (selectedCaptionLang) params.set("lang", selectedCaptionLang);
      if (isAutoGenerated) params.set("autogen", "1");

      try {
        const res = await fetch(`/api/transcript?${params}`);
        if (!res.ok) throw new Error(`HTTP ${res.status}`);
        const data = await res.json();

        if (Array.isArray(data.transcript)) {
          const normalized = data.transcript.map((line: any) => ({
            start: Number(line.start),
            duration: Number(line.duration) || 1.5,
            text: decodeHTML(line.text),
          }));
          setTranscript(normalized);
        }

        if (Array.isArray(data.captions)) {
          setCaptions(data.captions);
          const exists = data.captions.some(c => c.languageCode === selectedCaptionLang);
          if (!exists) {
            setSelectedCaptionLang(data.captions[0]?.languageCode || "");
            setIsAutoGenerated(Boolean(data.captions[0]?.isAutoGenerated));
          }
        }

        setIsAutoGenerated(Boolean(data.isAutoGenerated));
        retryRef.current = 0;

      } catch {
        if (retryRef.current < 3) {
          const retryDelay = 800 * (retryRef.current + 1);
          retryRef.current++;
          setTimeout(fetchTranscript, retryDelay);
        } else {
          setErrorTranscript("Failed to load transcript. Try refreshing.");
        }
      } finally {
        setLoadingTranscript(false);
      }
    };

    fetchTranscript();
  }, [videoId, selectedCaptionLang, isAutoGenerated]);

  useEffect(() => {
    fetch("/api/translate/languages")
      .then((res) => res.json())
      .then((data) => {
        if (Array.isArray(data.languages)) setLanguages(data.languages);
      });
  }, []);

  const handleSeek = (time: number) => {
    if (playerReady && player) player.seekTo(time, true);
  };

  const decodeHTML = (str: string): string => {
    const txt = document.createElement("textarea");
    txt.innerHTML = str;
    return txt.value;
  };

  return (
    <>
      <header className="w-full bg-white shadow-sm sticky top-0 z-50">
        <div className="max-w-[95vw] lg:max-w-[1200px] mx-auto flex items-center justify-between px-4 py-3">
          <h1 className="text-xl font-bold text-gray-800">Shadowly</h1>
          <div className="flex items-center gap-4">
            <button className="text-sm text-blue-600 hover:underline">About</button>
          </div>
        </div>
      </header>

      <section className="min-h-screen flex flex-col justify-center items-center px-4 bg-gray-100">
        <form onSubmit={handleSearch} className="w-full max-w-xl">
          <h1 className="text-4xl font-bold text-gray-800 mb-4">Learn languages by shadowing native speakers</h1>
          <p className="text-lg md:text-xl text-gray-600 mb-6">
            Shadowing helps your brain and mouth work together. You listen and repeat, just like kids do when they learn to speak.
          </p>

          <div className="flex flex-col sm:flex-row sm:items-center gap-2 w-full">
            <input
              type="text"
              placeholder="Paste a YouTube link..."
              value={searchUrl}
              onChange={(e) => setSearchUrl(e.target.value)}
              className="flex-1 rounded-xl border border-gray-300 bg-white px-5 py-3 text-sm shadow-sm focus:border-blue-500 focus:outline-none focus:ring-2 focus:ring-blue-300"
            />
            <button
              type="submit"
              className="sm:w-auto w-full rounded-xl bg-blue-600 px-5 py-3 text-sm font-semibold text-white shadow-md hover:bg-blue-700 transition-all"
            >
              Start Shadowing
            </button>
          </div>
        </form>

        <div className="mt-20 w-full">
          <RecommendedVideos />
        </div>
      </section>

      <div ref={playerSectionRef} className="bg-gray-100 py-10 px-2 sm:px-4 md:px-8">
      <div className="max-w-[95vw] lg:max-w-[1200px] mx-auto px-4 mb-4">
  <h2 className="text-2xl font-semibold text-gray-800">Your Shadowing Session</h2>
  <p className="text-sm text-gray-500">Watch, speak along, and follow the subtitles in real time.</p>
</div>
        
        <main className="max-w-[95vw] lg:max-w-[1200px] mx-auto bg-white rounded-2xl p-4 lg:p-6 shadow-xl flex flex-col lg:flex-row lg:h-[600px] overflow-hidden">
          
          <div className="flex-1 flex flex-col gap-4 pr-0 lg:pr-6">
            <div className="w-full aspect-video bg-black rounded-xl overflow-hidden">
              <YouTubePlayer
                videoId={videoId}
                onTimeUpdate={(time) => allowTimeUpdates && setCurrentTime(time)}
                onReady={(instance) => {
                  setPlayer(instance);
                  setPlayerReady(true);
                }}
              />
            </div>

            <div className="flex flex-col gap-4 mt-2 text-sm">
              <div>
                <label className="block text-gray-700 font-medium mb-1">Choose captions</label>
                <select
                  value={selectedCaptionLang}
                  onChange={(e) => {
                    const selected = captions.find(c => c.languageCode === e.target.value);
                    setSelectedCaptionLang(e.target.value);
                    setIsAutoGenerated(Boolean(selected?.isAutoGenerated));
                  }}
                  className="w-full rounded-lg border border-gray-300 px-3 py-2 shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500"
                >
                  {captions.map((cap, index) => (
                    <option key={`${cap.languageCode}-${index}`} value={cap.languageCode}>
                      {cap.name}
                    </option>
                  ))}
                </select>
              </div>

              <div>
                <label className="block text-gray-700 font-medium mb-1">Translate to</label>
                <select
                  value={targetLang}
                  onChange={(e) => setTargetLang(e.target.value)}
                  className="w-full rounded-lg border border-gray-300 px-3 py-2 shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500"
                >
                  {languages.map((lang) => (
                    <option key={lang.code} value={lang.code}>
                      {lang.name}
                    </option>
                  ))}
                </select>
              </div>

              {(loadingTranscript || errorTranscript) && (
                <div className="text-sm">
                  {loadingTranscript && <span className="text-gray-500">Loading transcriptâ€¦</span>}
                  {errorTranscript && <span className="text-red-500">{errorTranscript}</span>}
                </div>
              )}
            </div>
          </div>

          <div className="flex-1 flex flex-col overflow-hidden mt-6 lg:mt-0">
            <Transcript
              transcript={transcript}
              currentTime={currentTime}
              onSeek={handleSeek}
              isAutoGenerated={isAutoGenerated}
              allowScroll={allowScroll}
              targetLang={targetLang}
              setTargetLang={setTargetLang}
              languages={languages}
              notifyManualScroll={() => {
                setAllowTimeUpdates(false);
                setAllowScroll(false);
                if (resumeTimeoutRef.current) clearTimeout(resumeTimeoutRef.current);
                resumeTimeoutRef.current = setTimeout(() => {
                  setAllowTimeUpdates(true);
                  setAllowScroll(true);
                }, 5000);
              }}
            />
          </div>
        </main>
      </div>

      <section className="bg-white py-12">
  <div className="max-w-[95vw] lg:max-w-[1200px] mx-auto px-4 space-y-10">
    {[
      { title: "English with a British Accent", id: "british" },
      { title: "Casual Japanese Conversations", id: "japanese" },
      { title: "Spanish Spoken by Women", id: "spanish-female" },
      { title: "North American English (Male Speakers)", id: "na-english" },
    ].map((section) => (
      <div key={section.id}>
        <h3 className="text-lg font-semibold text-gray-800 mb-2">{section.title}</h3>
        <div className="overflow-x-auto">
          <div className="flex gap-4 w-fit">
            {Array.from({ length: 8 }).map((_, i) => (
              <div
                key={`${section.id}-${i}`}
                className="w-[200px] min-w-[200px] bg-white border border-gray-200 rounded-xl shadow hover:shadow-md transition overflow-hidden"
              >
                <div className="aspect-video bg-gray-300 flex items-center justify-center text-gray-500">
                  Thumbnail
                </div>
                <div className="p-2">
                  <div className="text-xs text-gray-500">Sample {i + 1}</div>
                  <div className="text-sm font-medium truncate">Example video title</div>
                </div>
              </div>
            ))}
          </div>
        </div>
      </div>
    ))}
  </div>
</section>

      <section className="w-full bg-white py-12">
        <div className="max-w-[95vw] lg:max-w-[1200px] mx-auto px-4 space-y-6">
          <h2 className="text-2xl font-bold text-gray-800">Boost Your Language Skills with Shadowing Practice</h2>
          <p className="text-base md:text-lg text-gray-700 max-w-3xl mx-auto">
            Shadowly helps you improve your speaking, listening, and pronunciation by shadowing real YouTube videos. This powerful technique involves repeating speech out loud as you hear itâ€”building fluency and confidence naturally.
          </p>
          <ul className="text-gray-600 text-sm md:text-base space-y-2 max-w-xl mx-auto text-left list-disc list-inside">
            <li>Watch native-level content with karaoke-style subtitles.</li>
            <li>Practice speaking in sync with the video using the shadowing technique.</li>
            <li>Learn new words and phrases in context, with precise timing and repeat options.</li>
          </ul>
          <p className="text-base md:text-lg text-gray-700 max-w-3xl mx-auto">
            Whether youâ€™re learning English, Spanish, Japanese, or any other language, Shadowly makes real-world practice fun and effective.
          </p>
        </div>
      </section>

      <footer className="bg-gray-100 py-6 text-center text-sm text-gray-500">
        <div>Â© {new Date().getFullYear()} Shadowly. All rights reserved.</div>
      </footer>
    </>
  );
}