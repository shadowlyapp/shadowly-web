import { NextResponse } from "next/server";
import axios from "axios";
import { parseCaptionXml } from "@/lib/captionUtils";

export const dynamic = "force-dynamic"; // Always fetch fresh data during dev

export async function GET(req: Request) {
  const { searchParams } = new URL(req.url);
  const videoId = searchParams.get("id");
  const lang = searchParams.get("lang");

  if (!videoId) {
    return NextResponse.json({ error: "Missing video ID" }, { status: 400 });
  }

  try {
    // Load HTML from YouTube video page
    const html = await axios
      .get(`https://www.youtube.com/watch?v=${videoId}`)
      .then((res) => res.data);

    const match = html.match(/ytInitialPlayerResponse\s*=\s*(\{.+?\})\s*;/s);
    if (!match) {
      return NextResponse.json(
        { error: "ytInitialPlayerResponse not found" },
        { status: 500 }
      );
    }

    const playerResponse = JSON.parse(match[1]);

    const captionTracks: any[] =
      playerResponse?.captions?.playerCaptionsTracklistRenderer?.captionTracks || [];

    if (captionTracks.length === 0) {
      return NextResponse.json({ error: "No captions available" }, { status: 404 });
    }

    const selectedTrack =
      (lang && captionTracks.find((t) => t.languageCode === lang)) || captionTracks[0];

    if (!selectedTrack?.baseUrl) {
      return NextResponse.json(
        { error: "Caption track URL missing", tracks: captionTracks },
        { status: 500 }
      );
    }

    console.log("üéØ Using caption track:", {
      language: selectedTrack.languageCode,
      kind: selectedTrack.kind,
      autoGenerated: selectedTrack.kind === "asr",
    });

    const headers =
      selectedTrack.kind === "asr"
        ? { headers: { "User-Agent": "Mozilla/5.0" } }
        : {};

    const captionXml = await axios.get(selectedTrack.baseUrl, headers).then((res) => res.data);
    const transcript = parseCaptionXml(captionXml);

    const availableCaptions = captionTracks.map((t) => ({
      languageCode: t.languageCode,
      name: t.name?.simpleText || t.languageCode,
    }));

    const isAutoGenerated = selectedTrack.kind === "asr";

    return NextResponse.json(
      {
        transcript,
        captions: availableCaptions,
        isAutoGenerated,
      },
      {
        status: 200,
        headers: {
          "Content-Type": "application/json",
          "Access-Control-Allow-Origin": "*",
        },
      }
    );
  } catch (err: any) {
    console.error("‚ùå Transcript fetch error:", err.message);
    return NextResponse.json(
      { error: "Failed to fetch transcript", details: err.message },
      { status: 500 }
    );
  }
}