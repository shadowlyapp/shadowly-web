'use client';

export const dynamic = 'force-dynamic';

import { useEffect, useRef, useState, Suspense } from "react";
import { useSearchParams, useRouter } from "next/navigation";
import Link from "next/link";
import Image from "next/image";
import YouTubePlayer from "@/components/YouTubePlayer";
import Transcript from "@/components/Transcript";
import RecommendedVideos from "@/components/RecommendedVideos";

const API_BASE_URL = process.env.NEXT_PUBLIC_API_BASE_URL || "http://localhost:3001";

interface TranscriptLine {
  text: string;
  start: number;
  duration: number;
}

type ApiTranscriptLine = {
  text?: string;
  start?: number | string;
  duration?: number | string;
};

function hasTranscript(data: unknown): data is { transcript: ApiTranscriptLine[] } {
  return Boolean(
    data && typeof data === "object" && Array.isArray((data as { transcript?: unknown }).transcript)
  );
}

interface CaptionTrack {
  name: string;
  languageCode: string;
  isAutoGenerated?: boolean;
}

interface TranscriptResponse {
  transcript?: ApiTranscriptLine[];
  captions?: CaptionTrack[];
  isAutoGenerated?: boolean;
  error?: string;
  details?: string;
}

interface LanguageOption {
  code: string;
  name: string;
}

interface LanguagesResponse {
  languages?: LanguageOption[];
}

interface PlaylistConfig {
  language: string;
  level: string;
  playlistId: string;
}

interface VideoItem {
  videoId: string;
  title: string;
  thumbnail?: string;
  id?: string;
}

interface PlaylistResponse {
  videos?: VideoItem[];
}

interface PopulatedPlaylist extends PlaylistConfig {
  videos: VideoItem[];
}

function extractYouTubeVideoId(urlString: string): string | null {
  try {
    const url = new URL(urlString);
    if (url.hostname.includes("youtu.be")) return url.pathname.split("/")[1];
    if (url.searchParams.has("v")) return url.searchParams.get("v");
    const pathParts = url.pathname.split("/");
    if (["embed", "shorts"].includes(pathParts[1]) && pathParts[2]) return pathParts[2];
    return null;
  } catch {
    return null;
  }
}

function PlayerPage() {
  const router = useRouter();
  const handleVideoSelect = (id: string) => {
    setVideoId(id);
    setCaptions([]);
    setTranscript([]);
    setSelectedCaptionLang("");
    setIsAutoGenerated(false);
  
    router.replace(`/?id=${id}`);
    setTimeout(() => {
      playerSectionRef.current?.scrollIntoView({ behavior: "smooth" });
    }, 100);
  };
  const searchParams = useSearchParams();

  const [searchUrl, setSearchUrl] = useState("");
  const [videoId, setVideoId] = useState("");
  const [transcript, setTranscript] = useState<TranscriptLine[]>([]);
  const [currentTime, setCurrentTime] = useState(0);
  const [player, setPlayer] = useState<YT.Player | null>(null);
  const [playerReady, setPlayerReady] = useState(false);

  const [captions, setCaptions] = useState<CaptionTrack[]>([]);
  const [selectedCaptionLang, setSelectedCaptionLang] = useState<string>("");
  const [isAutoGenerated, setIsAutoGenerated] = useState(false);

  const [targetLang, setTargetLang] = useState("es");
  const [languages, setLanguages] = useState<LanguageOption[]>([]);

  const [allowTimeUpdates, setAllowTimeUpdates] = useState(true);
  const [allowScroll, setAllowScroll] = useState(true);
  const resumeTimeoutRef = useRef<NodeJS.Timeout | null>(null);

  const [loadingTranscript, setLoadingTranscript] = useState(false);
  const [errorTranscript, setErrorTranscript] = useState("");
  const retryRef = useRef(0);

  const playerSectionRef = useRef<HTMLDivElement>(null);

  const [playlists, setPlaylists] = useState<PopulatedPlaylist[]>([]);

  const handleSearch = (e: React.FormEvent) => {
    e.preventDefault();
    const id = extractYouTubeVideoId(searchUrl);
    if (id) {
      router.push(`/?id=${id}`);
      setTimeout(() => {
        playerSectionRef.current?.scrollIntoView({ behavior: "smooth" });
      }, 100);
    } else {
      setSearchUrl("");
    }
  };

  useEffect(() => {
    const videoParam = decodeURIComponent(searchParams.get("id") || "");
    const id = extractYouTubeVideoId(videoParam) || videoParam;
    setVideoId(id);
  }, [searchParams]);

  useEffect(() => {
    if (!videoId || selectedCaptionLang === undefined) return;

    const fetchTranscript = async () => {
      setLoadingTranscript(true);
      setErrorTranscript("");

      const params = new URLSearchParams({ id: videoId });
      if (selectedCaptionLang) params.set("lang", selectedCaptionLang);
      if (isAutoGenerated) params.set("autogen", "1");

      try {
        const res = await fetch(`${API_BASE_URL}/api/transcript/scrape?${params}`);
        let data: TranscriptResponse | undefined;
        try {
          data = (await res.json()) as TranscriptResponse;
        } catch (parseError) {
          console.warn("Transcript response parsing failed", parseError);
        }

        if (!res.ok) {
          const message = data?.details || data?.error || `HTTP ${res.status}`;
          throw new Error(message);
        }

        const rawTranscript = hasTranscript(data) ? data.transcript : [];

        const normalized: TranscriptLine[] = rawTranscript.map((line) => ({
          start: Number(line.start ?? 0),
          duration: line.duration === undefined ? 1.5 : Number(line.duration) || 1.5,
          text: decodeHTML(String(line.text ?? "")),
        }));

        setTranscript(normalized);

        const rawCaptions = Array.isArray(data?.captions) ? data.captions : [];
        setCaptions(rawCaptions);
        const exists = rawCaptions.some((c) => c.languageCode === selectedCaptionLang);
        if (!exists) {
          setSelectedCaptionLang(rawCaptions[0]?.languageCode || "");
          setIsAutoGenerated(Boolean(rawCaptions[0]?.isAutoGenerated));
        }

        setIsAutoGenerated(Boolean(data?.isAutoGenerated));
        retryRef.current = 0;

      } catch (error) {
        console.error("Transcript request failed:", error);
        if (retryRef.current < 3) {
          const retryDelay = 800 * (retryRef.current + 1);
          retryRef.current++;
          setTimeout(fetchTranscript, retryDelay);
        } else {
          const message =
            error instanceof Error ? error.message : "Failed to load transcript.";
          setErrorTranscript(`${message} Try refreshing or checking the backend.`);
        }
      } finally {
        setLoadingTranscript(false);
      }
    };

    fetchTranscript();
  }, [videoId, selectedCaptionLang, isAutoGenerated]);

  useEffect(() => {
    if (typeof window === "undefined") return;
  
    fetch(`${process.env.NEXT_PUBLIC_API_BASE_URL}/api/translate/languages`)
      .then((res) => res.json() as Promise<LanguagesResponse>)
      .then((data) => {
        if (Array.isArray(data.languages)) setLanguages(data.languages);
      })
      .catch((err) => {
        console.error("Failed to load languages:", err);
      });
  }, []);

  useEffect(() => {
    const loadPlaylists = async () => {
      try {
        const configRes = await fetch(`${API_BASE_URL}/api/recommend/playlists`);
        if (!configRes.ok) {
          throw new Error("Failed to fetch playlist config");
        }

        const config = (await configRes.json()) as PlaylistConfig[];

        if (!Array.isArray(config)) {
          return;
        }

        const fullPlaylists = await Promise.all(
          config.map(async (pl) => {
            const res = await fetch(`${API_BASE_URL}/api/youtube/playlist?id=${pl.playlistId}`);
            if (!res.ok) {
              throw new Error(`Failed to fetch playlist ${pl.playlistId}`);
            }
            const data = (await res.json()) as PlaylistResponse;

            const rawVideos = Array.isArray(data.videos) ? data.videos : [];
            const videos = rawVideos.reduce<VideoItem[]>((acc, v) => {
              const thumbnail = typeof v.thumbnail === "string" ? v.thumbnail.trim() : "";
              const title = typeof v.title === "string" && v.title ? v.title : "Untitled";
              const normalizedId = (() => {
                if (typeof v.videoId === "string" && v.videoId.trim()) return v.videoId.trim();
                if (typeof (v as { id?: string }).id === "string" && (v as { id?: string }).id?.trim()) {
                  return (v as { id: string }).id.trim();
                }
                return "";
              })();

              if (!normalizedId) {
                return acc;
              }

              acc.push({
                videoId: normalizedId,
                title,
                thumbnail: thumbnail || undefined,
              });
              return acc;
            }, []);

            return {
              ...pl,
              videos,
            };
          })
        );

        setPlaylists(fullPlaylists);
      } catch (err) {
        console.error("Failed to load dynamic playlists:", err);
      }
    };
  
    loadPlaylists();
  }, []);

  useEffect(() => {
    if (process.env.NEXT_PUBLIC_SKIP_TRANSLATION_HEALTHCHECK === "true") {
      return;
    }

    let cancelled = false;

    const fetchDemoTranslation = async () => {
      try {
        const res = await fetch(`${API_BASE_URL}/api/translate`, {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({ word: "hello", source: "auto", target: "es" }),
        });

        if (!res.ok) {
          console.debug("Translation health check skipped:", res.status);
          return;
        }
        const data = await res.json();
        if (!cancelled) {
          console.debug("🌍 Demo Translation:", data.translatedText);
        }
      } catch (err) {
        console.debug("Translation health check failed:", err);
      }
    };

    fetchDemoTranslation();

    return () => {
      cancelled = true;
    };
  }, []);
  
  const handleSeek = (time: number) => {
    if (playerReady && player) player.seekTo(time, true);
  };

  const decodeHTML = (str: string): string => {
    const txt = document.createElement("textarea");
    txt.innerHTML = str;
    return txt.value;
  };

  return (
    <>
      <header className="w-full bg-white shadow-sm sticky top-0 z-50">
        <div className="max-w-[95vw] lg:max-w-[1200px] mx-auto flex items-center justify-between px-4 py-3">
          <h1 className="text-xl font-bold text-gray-800">Shadowly</h1>
          <div className="flex items-center gap-4">
            <Link
              href="/about"
              className="inline-flex items-center gap-2 rounded-full border border-slate-200 px-4 py-1.5 text-sm font-medium text-slate-600 transition hover:bg-slate-100"
            >
              <span className="h-2 w-2 rounded-full bg-slate-400" aria-hidden="true" />
              About
            </Link>
          </div>
        </div>
      </header>

      <section className="relative min-h-screen flex flex-col items-center justify-center px-4 overflow-hidden bg-gradient-to-b from-white via-slate-50 to-white">
        <div
          className="pointer-events-none absolute inset-0 bg-[radial-gradient(circle_at_top,_rgba(148,163,184,0.2),_transparent_60%)]"
          aria-hidden="true"
        />

        <form
          onSubmit={handleSearch}
          className="relative z-10 w-full max-w-2xl rounded-3xl border border-slate-200 bg-white p-8 shadow-xl"
        >
          <h1 className="text-4xl font-bold text-slate-900 tracking-tight mb-4">
            Learn languages by shadowing native speakers
          </h1>
          <p className="text-lg md:text-xl text-slate-600 mb-6">
            Shadowly guides you through authentic videos with synced captions so you can listen, repeat, and build confidence faster.
          </p>

          <div className="flex flex-col sm:flex-row sm:items-center gap-2 w-full">
            <input
              type="text"
              placeholder="Paste a YouTube link..."
              value={searchUrl}
              onChange={(e) => setSearchUrl(e.target.value)}
              className="flex-1 rounded-xl border border-slate-200 bg-white px-5 py-3 text-sm text-slate-900 shadow-sm focus:border-slate-400 focus:outline-none focus:ring-2 focus:ring-slate-300"
            />
            <button
              type="submit"
              className="sm:w-auto w-full rounded-xl bg-slate-900 px-5 py-3 text-sm font-semibold text-white shadow-lg shadow-slate-400/30 transition-all hover:-translate-y-0.5 hover:bg-slate-700"
            >
              <span className="mr-2 inline-flex h-2 w-2 items-center justify-center">
                <span className="inline-block h-2 w-2 rounded-full bg-white" aria-hidden="true" />
              </span>
              Start Shadowing
            </button>
          </div>
        </form>

        <div className="relative z-10 mt-16 w-full">
          <RecommendedVideos onSelectVideo={handleVideoSelect} />
        </div>
      </section>

      <div ref={playerSectionRef} className="bg-white py-12 px-2 sm:px-4 md:px-8">
        <div className="max-w-[95vw] lg:max-w-[1200px] mx-auto px-4 mb-4">
        <h2 className="text-2xl font-semibold text-gray-900">Your Shadowing Session</h2>
        <p className="text-sm text-gray-500">Watch, speak along, and follow the subtitles in real time.</p>
      </div>

        <main className="max-w-[95vw] lg:max-w-[1200px] mx-auto bg-white rounded-3xl p-4 lg:p-6 shadow-xl shadow-slate-200 flex flex-col lg:flex-row lg:h-[600px] overflow-hidden border border-slate-200/60">
          
          <div className="flex-1 flex flex-col gap-4 pr-0 lg:pr-6">
            <div className="w-full aspect-video bg-black rounded-xl overflow-hidden">
              <YouTubePlayer
                videoId={videoId}
                onTimeUpdate={(time) => allowTimeUpdates && setCurrentTime(time)}
                onReady={(instance) => {
                  setPlayer(instance);
                  setPlayerReady(true);
                }}
              />
            </div>

            <div className="flex flex-col gap-4 mt-2 text-sm">
              <div>
                <label className="block text-gray-700 font-medium mb-1">Choose captions</label>
                <select
                  value={selectedCaptionLang}
                  onChange={(e) => {
                    const selected = captions.find(c => c.languageCode === e.target.value);
                    setSelectedCaptionLang(e.target.value);
                    setIsAutoGenerated(Boolean(selected?.isAutoGenerated));
                  }}
                  className="w-full rounded-lg border border-gray-200 px-3 py-2 shadow-sm focus:outline-none focus:ring-2 focus:ring-sky-400"
                >
                  {captions.map((cap, index) => (
                    <option key={`${cap.languageCode}-${index}`} value={cap.languageCode}>
                      {cap.name}
                    </option>
                  ))}
                </select>
              </div>

              <div>
                <label className="block text-gray-700 font-medium mb-1">Translate to</label>
                <select
                  value={targetLang}
                  onChange={(e) => setTargetLang(e.target.value)}
                  className="w-full rounded-lg border border-gray-200 px-3 py-2 shadow-sm focus:outline-none focus:ring-2 focus:ring-sky-400"
                >
                  {languages.map((lang) => (
                    <option key={lang.code} value={lang.code}>
                      {lang.name}
                    </option>
                  ))}
                </select>
              </div>

              {(loadingTranscript || errorTranscript) && (
                <div className="text-sm">
                  {loadingTranscript && <span className="text-gray-500">Loading transcript…</span>}
                  {errorTranscript && <span className="text-red-500">{errorTranscript}</span>}
                </div>
              )}
            </div>
          </div>

          <div className="flex-1 flex flex-col overflow-hidden mt-6 lg:mt-0">
            <Transcript
              transcript={transcript}
              currentTime={currentTime}
              onSeek={handleSeek}
              isAutoGenerated={isAutoGenerated}
              allowScroll={allowScroll}
              targetLang={targetLang}
              notifyManualScroll={() => {
                setAllowTimeUpdates(false);
                setAllowScroll(false);
                if (resumeTimeoutRef.current) clearTimeout(resumeTimeoutRef.current);
                resumeTimeoutRef.current = setTimeout(() => {
                  setAllowTimeUpdates(true);
                  setAllowScroll(true);
                }, 5000);
              }}
            />
          </div>
        </main>
      </div>

      <section className="bg-white py-12">
  <div className="max-w-[95vw] lg:max-w-[1200px] mx-auto px-4 space-y-10">
    {playlists.map((pl) => (
      <div key={pl.playlistId}>
        <h3 className="text-lg font-semibold text-gray-800 mb-2">
          {pl.language} — {pl.level}
        </h3>
        <div className="overflow-x-auto">
          <div className="flex gap-4 w-fit">
            {pl.videos.slice(0, 8).map((video, i) => (
              <div
                key={`${pl.playlistId}-${video.videoId}-${i}`}
                className="w-[200px] min-w-[200px] bg-white border border-gray-200 rounded-xl shadow hover:shadow-md transition overflow-hidden cursor-pointer"
                onClick={() => {
                  handleVideoSelect(video.videoId);
                }}
              >
                <div className="aspect-video relative overflow-hidden">
                  {video.thumbnail ? (
                    <Image
                      src={video.thumbnail}
                      alt={video.title}
                      fill
                      className="object-cover"
                      sizes="200px"
                    />
                  ) : (
                    <div className="flex h-full w-full items-center justify-center bg-gray-200 text-xs text-gray-500">
                      No thumbnail
                    </div>
                  )}
                </div>
                <div className="p-2">
                  <div className="text-xs text-gray-500">Sample {i + 1}</div>
                  <div className="text-sm font-medium truncate">{video.title}</div>
                </div>
              </div>
            ))}
          </div>
        </div>
      </div>
    ))}
  </div>
</section>

      <section className="w-full bg-white py-12">
        <div className="max-w-[95vw] lg:max-w-[1200px] mx-auto px-4 space-y-6">
          <h2 className="text-2xl font-bold text-gray-800">Boost Your Language Skills with Shadowing Practice</h2>
          <p className="text-base md:text-lg text-gray-700 max-w-3xl mx-auto">
            Shadowly helps you improve your speaking, listening, and pronunciation by shadowing real YouTube videos. This powerful technique involves repeating speech out loud as you hear it—building fluency and confidence naturally.
          </p>
          <ul className="text-gray-600 text-sm md:text-base space-y-2 max-w-xl mx-auto text-left list-disc list-inside">
            <li>Watch native-level content with karaoke-style subtitles.</li>
            <li>Practice speaking in sync with the video using the shadowing technique.</li>
            <li>Learn new words and phrases in context, with precise timing and repeat options.</li>
          </ul>
          <p className="text-base md:text-lg text-gray-700 max-w-3xl mx-auto">
            Whether you’re learning English, Spanish, Japanese, or any other language, Shadowly makes real-world practice fun and effective.
          </p>
        </div>
      </section>

      <footer className="bg-gray-100 py-6 text-sm text-gray-500">
        <div className="mx-auto flex w-full max-w-[95vw] flex-col items-center justify-between gap-3 px-4 text-center sm:flex-row sm:text-left">
          <span>© {new Date().getFullYear()} Shadowly. All rights reserved.</span>
          <Link
            href="/privacy"
            className="inline-flex items-center gap-2 rounded-full border border-slate-200 px-3 py-1 text-xs font-medium text-slate-600 transition hover:bg-slate-200/60"
          >
            <span className="inline-flex h-2 w-2 items-center justify-center">
              <span className="inline-block h-2 w-2 rounded-full bg-slate-400" aria-hidden="true" />
            </span>
            Privacy Policy
          </Link>
        </div>
      </footer>
    </>
  );
}

export default function PlayerPageWrapper() {
  return (
    <Suspense fallback={<div className="p-10 text-center text-gray-500">Loading player...</div>}>
      <PlayerPage />
    </Suspense>
  );
}
